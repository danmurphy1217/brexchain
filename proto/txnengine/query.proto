syntax = "proto3";
package cosmonaut.brexchain.txnengine;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "txnengine/params.proto";
import "txnengine/transaction.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/cosmonaut/brexchain/x/txnengine/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/cosmonaut/brexchain/txnengine/params";
  }
  // Queries a Transaction by id.
	rpc Transaction(QueryGetTransactionRequest) returns (QueryGetTransactionResponse) {
		option (google.api.http).get = "/cosmonaut/brexchain/txnengine/transaction/{id}";
	}

	// Queries a list of Transaction items.
	rpc TransactionAll(QueryAllTransactionRequest) returns (QueryAllTransactionResponse) {
		option (google.api.http).get = "/cosmonaut/brexchain/txnengine/transaction";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetTransactionRequest {
	uint64 id = 1;
}

message QueryGetTransactionResponse {
	Transaction Transaction = 1 [(gogoproto.nullable) = false];
}

message QueryAllTransactionRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllTransactionResponse {
	repeated Transaction Transaction = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
